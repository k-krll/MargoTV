const express = require('express');
const multer = require('multer');
const path = require('path');
const ffmpeg = require('ffmpeg-static');
const { spawn } = require('child_process');
const fs = require('fs');
const os = require('os');
const mongoose = require('mongoose');
const Video = require('./models/Video');
const Encoding = require('./models/Encoding');

const app = express();
const port = 3005;
const hostname = '0.0.0.0';
const APP_NAME = 'MargoTV';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/margotv', {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => {
  console.log('üì¶ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
}).catch(err => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞
app.set('view engine', 'ejs');
app.use(express.static('public'));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  fileFilter: (req, file, cb) => {
    if (file.fieldname === 'video') {
      cb(null, file.mimetype.startsWith('video/'));
    } else if (file.fieldname === 'thumbnail') {
      cb(null, file.mimetype.startsWith('image/'));
    } else {
      cb(null, false);
    }
  }
});

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
let videos = [];

// –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö require
const isDev = process.env.NODE_ENV === 'development';

// –î–æ–±–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ express
if (isDev) {
  app.use((req, res, next) => {
    console.log(`${req.method} ${req.url}`);
    next();
  });
}

// –î–æ–±–∞–≤–∏–º middleware –¥–ª—è CORS –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  next();
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', async (req, res) => {
  try {
    const videos = await Video.find().sort({ uploadDate: -1 });
    res.render('index', { 
      videos: videos,
      appName: APP_NAME 
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ:', error);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∫–∏
app.get('/upload', (req, res) => {
  res.render('upload', { appName: APP_NAME });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
app.post('/upload', upload.fields([
  { name: 'video', maxCount: 1 },
  { name: 'thumbnail', maxCount: 1 }
]), async (req, res) => {
  try {
    const title = req.body.title;
    const description = req.body.description;
    const videoFile = req.files['video'][0];
    const thumbnailFile = req.files['thumbnail'] ? req.files['thumbnail'][0] : null;

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–∏–¥–µ–æ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º
    const video = await Video.create({
      title,
      description,
      status: 'processing',
      path: 'processing', // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å
      thumbnail: thumbnailFile ? `thumbnails/${Date.now()}${path.extname(thumbnailFile.originalname)}` : null
    });

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏
    const encoding = await Encoding.create({
      videoId: video._id,
      status: 'pending',
      startTime: new Date()
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    res.json({ 
      success: true, 
      encodingId: encoding._id,
      redirectUrl: `/encoding-status/${encoding._id}`
    });

    // –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    processVideo(videoFile, thumbnailFile, video, encoding);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:', error);
    res.status(500).json({ error: 'Upload error' });
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
app.get('/encoding-status/:id', (req, res) => {
  res.render('encoding-status', { 
    encodingId: req.params.id,
    appName: APP_NAME 
  });
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
app.get('/api/encoding-status/:id', async (req, res) => {
  try {
    const encoding = await Encoding.findById(req.params.id).populate('videoId');
    res.json(encoding);
  } catch (error) {
    res.status(500).json({ error: 'Status check error' });
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
async function processVideo(videoFile, thumbnailFile, video, encoding) {
  const inputPath = videoFile.path;
  const outputPath = `public/videos/${Date.now()}.mp4`;

  console.log(`
üé¨ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ:
- ID: ${video._id}
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${video.title}
- –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: ${inputPath}
- –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: ${outputPath}
  `);

  try {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ thumbnail –µ—Å–ª–∏ –µ—Å—Ç—å
    if (thumbnailFile) {
      const thumbnailPath = `public/${video.thumbnail}`;
      console.log(`üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—å—é: ${thumbnailPath}`);
      fs.copyFileSync(thumbnailFile.path, thumbnailPath);
      fs.unlinkSync(thumbnailFile.path);
      console.log('‚úÖ –ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ...');
    const ffprobeProcess = spawn(ffmpeg, [
      '-i', inputPath,
      '-show_entries', 'format=duration',
      '-v', 'quiet',
      '-of', 'csv=p=0'
    ]);

    let duration = 0;
    ffprobeProcess.stdout.on('data', (data) => {
      duration = parseFloat(data.toString());
      encoding.duration = duration;
      encoding.save();
      console.log(`‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: ${duration.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('üîÑ –ù–∞—á–∞–ª–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è...');
    const ffmpegProcess = spawn(ffmpeg, [
      '-i', inputPath,
      '-c:v', 'libx264',
      '-c:a', 'aac',
      '-progress', 'pipe:1',
      outputPath
    ]);

    ffmpegProcess.stdout.on('data', async (data) => {
      const lines = data.toString().trim().split('\n');
      const progressData = {};
      
      lines.forEach(line => {
        const [key, value] = line.split('=');
        progressData[key] = value;
      });

      if (progressData.out_time_ms) {
        const currentTime = parseInt(progressData.out_time_ms) / 1000000;
        const progress = (currentTime / duration) * 100;
        
        encoding.currentTime = currentTime;
        encoding.progress = Math.min(progress, 100);
        encoding.status = 'processing';
        await encoding.save();

        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10%
        if (Math.floor(progress) % 10 === 0) {
          console.log(`‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: ${progress.toFixed(1)}%`);
        }
      }
    });

    ffmpegProcess.stderr.on('data', (data) => {
      console.log(`üîß FFmpeg: ${data.toString()}`);
    });

    ffmpegProcess.on('close', async (code) => {
      if (code === 0) {
        // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        console.log('‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        video.path = outputPath.replace('public/', '');
        video.status = 'completed';
        await video.save();

        encoding.status = 'completed';
        encoding.progress = 100;
        encoding.endTime = new Date();
        await encoding.save();

        console.log(`
üìù –ò—Ç–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:
- –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration.toFixed(2)} —Å–µ–∫
- –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: ${outputPath}
- –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${((encoding.endTime - encoding.startTime) / 1000).toFixed(1)} —Å–µ–∫
        `);

        fs.unlinkSync(inputPath);
        console.log('üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã');
      } else {
        // –û—à–∏–±–∫–∞
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
        encoding.status = 'error';
        encoding.error = `FFmpeg exited with code ${code}`;
        await encoding.save();

        video.status = 'error';
        await video.save();
      }
    });
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    encoding.status = 'error';
    encoding.error = error.message;
    await encoding.save();

    video.status = 'error';
    await video.save();
  }
}

// –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è thumbnails
['uploads', 'public/videos', 'public/thumbnails'].forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

// –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å
function getLocalIP() {
  const interfaces = os.networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    for (const interface of interfaces[name]) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º non-IPv4 –∏ internal (–Ω–∞–ø—Ä–∏–º–µ—Ä, 127.0.0.1)
      if (interface.family === 'IPv4' && !interface.internal) {
        return interface.address;
      }
    }
  }
  return '0.0.0.0';
}

const localIP = getLocalIP();

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('Error:', err);
  res.status(500).send('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
app.get('/edit/:id', async (req, res) => {
  try {
    const video = await Video.findById(req.params.id);
    if (!video) {
      return res.status(404).send('–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    res.render('edit', { 
      video: video,
      appName: APP_NAME 
    });
  } catch (error) {
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

// API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ
app.post('/api/videos/:id', upload.single('thumbnail'), async (req, res) => {
  try {
    const { title, description } = req.body;
    const video = await Video.findById(req.params.id);
    
    if (!video) {
      return res.status(404).json({ error: '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ
    if (req.file) {
      const thumbnailPath = `thumbnails/${Date.now()}${path.extname(req.file.originalname)}`;
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
      if (video.thumbnail) {
        const oldPath = path.join('public', video.thumbnail);
        if (fs.existsSync(oldPath)) {
          fs.unlinkSync(oldPath);
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–≤—å—é
      fs.copyFileSync(req.file.path, `public/${thumbnailPath}`);
      fs.unlinkSync(req.file.path);
      video.thumbnail = thumbnailPath;
    }

    video.title = title;
    video.description = description;
    await video.save();

    res.json({ success: true });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' });
  }
});

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ
app.delete('/api/videos/:id', async (req, res) => {
  try {
    const video = await Video.findById(req.params.id);
    
    if (!video) {
      return res.status(404).json({ error: '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
    if (video.path) {
      const videoPath = path.join('public', video.path);
      if (fs.existsSync(videoPath)) {
        fs.unlinkSync(videoPath);
      }
    }

    if (video.thumbnail) {
      const thumbnailPath = path.join('public', video.thumbnail);
      if (fs.existsSync(thumbnailPath)) {
        fs.unlinkSync(thumbnailPath);
      }
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
    await video.deleteOne();
    
    res.json({ success: true });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏' });
  }
});

app.listen(port, hostname, () => {
  console.log(`
    üöÄ –°–µ—Ä–≤–µ—Ä MargoTV –∑–∞–ø—É—â–µ–Ω
    üì° –ü–æ—Ä—Ç: ${port}
    üîß –†–µ–∂–∏–º: ${isDev ? '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞' : '–ø—Ä–æ–¥–∞–∫—à–Ω'}
    üåê –õ–æ–∫–∞–ª—å–Ω—ã–π: http://localhost:${port}
    üåç –ü–æ —Å–µ—Ç–∏: http://${localIP}:${port}
    üì¶ MongoDB URI: ${process.env.MONGODB_URI}
  `);
}); 